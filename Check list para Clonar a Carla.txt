Fechado, par√ßa üòé.
Vou montar um **checklist operacional** bem enxuto, com **passo a passo micro**, para voc√™ ou qualquer pessoa conseguir **clonar, configurar e rodar** a Carla do zero ‚Äî localmente e na Railway.

N√£o ter√° c√≥digos longos, s√≥ instru√ß√µes claras e ordem correta.

---

# **Checklist Operacional ‚Äî Projeto Carla**

## **1. Preparar o ambiente**

‚úÖ **Instalar o NVM para Windows**

* Baixar o [NVM for Windows](https://github.com/coreybutler/nvm-windows/releases).
* Durante a instala√ß√£o, usar o caminho padr√£o:

  * **NVM root:** `C:\Users\<seu-usu√°rio>\AppData\Local\nvm`
  * **NodeJS path:** `C:\Program Files\nodejs`

‚úÖ **Instalar vers√µes do Node**

```bash
nvm install 18.20.4   # Para Baileys (WhatsApp)
nvm install 20.16.0   # Opcional: para GPT se necess√°rio
```

‚úÖ **Selecionar Node 18** (sempre que for rodar Carla):

```bash
nvm use 18.20.4
```

---

## **2. Clonar o projeto**

‚úÖ **Clonar o reposit√≥rio do GitHub**

```bash
git clone https://github.com/contatotopofertasloja-web/carla-bot.git
cd carla-bot
```

---

## **3. Configurar vari√°veis de ambiente**

‚úÖ **Criar o arquivo `.env`** na raiz do projeto e configurar:

```
OPENAI_API_KEY=coloque_sua_chave_aqui
MODEL_NAME=gpt-4o
PRICE_TARGET=170
WPP_AUTH_DIR=./.wpp-auth
MEMORY_TTL_DAYS=7
PORT=8080
```

> **Dica:**
> Para deploy na **Railway**, o `WPP_AUTH_DIR` deve ser:

```
WPP_AUTH_DIR=/app/baileys-auth
```

---

## **4. Instalar depend√™ncias**

‚úÖ **Instalar todas as libs necess√°rias**:

```bash
npm install
```

Depend√™ncias inclusas:

* **Express** ‚Üí Servidor HTTP.
* **Baileys** ‚Üí Conex√£o WhatsApp.
* **QRCode** ‚Üí Gera√ß√£o do QR.
* **OpenAI** ‚Üí Integra√ß√£o GPT.
* **Dotenv** ‚Üí Gerenciamento de vari√°veis.

---

## **5. Conectar ao WhatsApp**

‚úÖ **Criar diret√≥rio para salvar sess√£o**:

```bash
mkdir .wpp-auth
```

‚úÖ **Iniciar o servidor**:

```bash
npm start
```

‚úÖ **Gerar QR**:

1. Acesse: [http://127.0.0.1:8080/wpp/qr](http://127.0.0.1:8080/wpp/qr)
2. Atualize a p√°gina a cada 2‚Äì3 segundos at√© o QR aparecer.
3. Escaneie pelo **WhatsApp ‚Üí Dispositivos Conectados**.

> **Dica:** Uma vez pareado, a sess√£o fica salva e n√£o precisa repetir.

---

## **6. Testar localmente**

‚úÖ **Verificar status do servidor**:

```bash
curl http://127.0.0.1:8080/health
```

Resposta esperada:

```json
{"ok": true}
```

‚úÖ **Testar envio de mensagem via Webhook**:

```bash
curl -X POST "http://127.0.0.1:8080/webhook" ^
  -H "Content-Type: application/json" ^
  -d "{\"userId\":\"c001\",\"text\":\"Oi, Carla!\",\"context\":{}}"
```

Resposta esperada: pitch de venda personalizado.

---

## **7. Deploy na Railway**

‚úÖ **Passos principais**:

1. Criar projeto **carla-bot** na Railway.
2. Conectar ao GitHub.
3. Configurar **vari√°veis de ambiente** na Railway:

   * `OPENAI_API_KEY`
   * `MODEL_NAME`
   * `PRICE_TARGET`
   * `WPP_AUTH_DIR=/app/baileys-auth`
   * `MEMORY_TTL_DAYS`
   * `PORT=8080`
4. Criar **Volume persistente**:

   * Path: `/app/baileys-auth`
5. Deploy autom√°tico a partir da branch `main`.

‚úÖ **Testar sa√∫de do app na nuvem**:

```bash
curl https://carla-bot-production.up.railway.app/health
```

‚úÖ **Testar Webhook na nuvem**:

```bash
curl -X POST "https://carla-bot-production.up.railway.app/webhook" ^
  -H "Content-Type: application/json" ^
  -d "{\"userId\":\"c001\",\"text\":\"Oi, Carla!\",\"context\":{}}"
```

---

## **8. Recursos de Humaniza√ß√£o**

‚úÖ **Simular comportamento humano**:

* Antes de responder, Carla envia presen√ßa **‚Äúdigitando...‚Äù** proporcional ao tamanho da resposta.
* Marca mensagens como **lidas** automaticamente.

‚úÖ **Manter mem√≥ria leve**:

* Hist√≥rico do usu√°rio armazenado por **7 dias** para evitar repeti√ß√£o de perguntas.

---

## **9. Persona e Convers√£o**

‚úÖ **Carla como vendedora real**:

* Sempre fala com empatia e seguran√ßa.
* Usa storytelling: ‚ÄúEu uso esse produto e recomendo!‚Äù.

‚úÖ **Produto configurado**:

* Progressiva Vegetal Premium.
* R\$ 170, 500ml, dura 3 meses, sem formol.

‚úÖ **Fluxo de convers√£o**:

1. Cumprimentar calorosamente.
2. Descobrir necessidades do cliente.
3. Mostrar benef√≠cios do produto.
4. Criar urg√™ncia (‚Äúestoque limitado‚Äù).
5. Encaminhar para link de checkout.

---

## **10. Pr√≥ximos passos**

* [ ] Criar logs de cliques e convers√µes.
* [ ] A/B testing com pre√ßos diferentes.
* [ ] Configurar m√∫ltiplas personas (Carla e L√≠via).
* [ ] Criar dashboard com estat√≠sticas em tempo real.

---

Quer que eu j√° monte esse checklist em um **arquivo separado** chamado `carla-checklist.md` para manter junto do `carla-config.md`?
Assim voc√™ ter√° **o documento t√©cnico** e **o passo a passo pr√°tico** lado a lado. Quer?
